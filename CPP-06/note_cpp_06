回顾:
十六 对象的创建和销毁
1 构造函数初始化表
 类名(形参表):初始化表{函数体}
注：编译顺序由变量在类中的声明顺序来决定

2 this(关键字)指针
1）区分作用域
2）返回自引用
3）对象的自销毁

3 常成员函数
 返回类型 函数名(形参表) const{函数体}
//返回类型 常成员函数名(const 类名& this,形参表){函数体}
 若需要在常函数中修改成员变量，则需要在改变量的声明前加mutable修饰
//与不加const的，函数名、形参表相同的，函数构成重载

4 析构函数
 ~类名(void){清理动态分配的资源}
 执行时机，在该类 类型的对象所在的作用域结束，即遇到"}"作用域终止符

5 对象的创建和销毁
创建：分配内存--》构造成员子对象--》执行构造代码
销毁：执行析构函数--》析构成员子对象--》释放内存

十七 拷贝构造和拷贝赋值
1 浅拷贝(引用拷贝)和深拷贝(内存拷贝)

================================================
今天
十七 拷贝构造和拷贝赋值
...
2 在C++类中会提供一个缺省的拷贝赋值运算符函数，完成两个对象的直接赋值操作。
但是它和缺省拷贝构造类似，也是浅拷贝，为了得到深拷贝赋值的效果，必须自己定
义拷贝赋值运算符函数。见：01copy_String.cpp
类名& operator=(const 类名& that){
    if(this!=&that){//1、防止自赋值
        //2、释放旧资源
        //3、分配新资源
        //4、新资源赋值
    }
    return *this;//5、返回自引用
}

十七 静态成员(static)
1 静态成员变量   见：02static.cpp

class 类名{
    static 数据类型 变量类型;//声明静态成员变量
};
数据类型 类名::变量名 = 初值;//定义和初始化

1）静态成员变量不属于对象，但可以通过对象去访问它。
2）不能在构造函数中定义和初始化，需要在类的外部单独的定义和初始化
3）静态成员变量内存在全局区。
4）静态成员变量可以通过类名直接访问
    类名::静态成员变量
5）静态成员变量在类所创建的多个对象之间是共享的


2 静态成员函数   见：03static.cpp
class 类名{
    static 返回类型 函数名(形参表){函数体}
};
1）静态成员函数没有this指针,所以也没有const属性
2）可通过"类名::"直接访问，也可以通过对象访问
注：静态成员函数只能访问静态成员

3 单例模式：一个类只允许创建唯一的对象
1）禁止在类的外部创建对象:私有化构造函数
2）在类的内部维护唯一对象：静态成员变量
3）访问单例对象的方法：静态成员函数
4）创建方式：
    --》饿汉式：单例对象无论用或不用，程序启动即创建   见：04hungry.cpp
    --》懒汉式：单例对象在用的时候再创建，不用即撤销   见：05lazy.cpp
eg:
class A{
    static A& get(void){
        return m_a;
    }
private:
    A(void);
    A(const A&);
    static A m_a;
};

========================================================
十九 成员指针(了解)
1 成员变量指针
1）定义
    类型 类名::*成员指针变量名=&类名::成员变量；
2）使用
    对象.*成员指针变量名; //.*成员指针解引用运算符
    对象指针->*成员指针变量名; //->*间接成员指针解引用运算
注：成员变量指针的本质是类中特定成员在对象中的相对地址

见：06memberptr.cpp


2 成员函数指针
1）定义
    返回类型 (*类名::成员函数指针)(形参表)=&类名::成员函数名;
2）使用
    (对象.*成员函数指针)(实参表);
    (对象指针->*成员函数指针)(实参表);

===========================================================
二十 操作符重载
eg:复数
    (1+2i)+(3+4i)=4+6i;
1 双目操作符
1.1 运算类的双目操作符(L # R)：+ - * /
--》左右操作数可以是左值也可以是右值
--》表达式结果是右值

1）成员函数形式
L#R的表达式会被编译器自动处理为L.operator#(R)的成员函数调用，该函数的
返回值即为表达式的值。

2）全局函数形式

1.2 赋值类的双目操作符









